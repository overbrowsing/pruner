function pruner(){let e=[...document.querySelectorAll("[data-pruner]")],r={},o=0,n=0,t=e=>r[e]?Promise.resolve(r[e]):new Promise((o,n)=>{let t=new Image;t.crossOrigin="anonymous",t.onload=()=>o(r[e]=t),t.onerror=()=>n(`Failed to load: ${e}`),t.src=e}),a=(e,r)=>Object.assign(document.createElement("canvas"),{width:e,height:r}),l=()=>({w:innerWidth,h:innerHeight}),i=(e,r,o,n,t)=>[Math.min(Math.max(0,Math.floor(e/r)-Math.floor(o/2)),t-o),Math.min(Math.max(0,e%r-Math.floor(n/2)),r-n)],s=async(e,r,o,n)=>{let{imageName:l,cols:s,rows:c,tileWidth:d,tileHeight:m,mobileScale:f,imagePath:u,roi:g,imageExtension:h="webp"}=JSON.parse(e.dataset.pruner);if(!s||!c||!d||!m||!u||!l)return console.error("Missing params.");let p=r&&f?f:1,w=Math.round(d*p),$=Math.round(m*p),b=Math.min(Math.ceil(o/w),s),E=Math.min(Math.ceil(n/$),c),v=a(b*w,E*$),x=v.getContext("2d");x.imageSmoothingEnabled=!1,e.src="";let y=Array.from({length:s*c},(e,r)=>`${u}${l}-${r+1}.${h}`),[_,L]=g?i(g-1,s,E,b,c):[Math.max(0,Math.floor(c/2)-Math.floor(E/2)),Math.max(0,Math.floor(s/2)-Math.floor(b/2))];try{let I=await Promise.all(Array.from({length:E*b},(e,r)=>{let o=_+Math.floor(r/b),n=L+r%b;return o<c&&n<s?t(y[o*s+n]):Promise.resolve(null)}));I.forEach((e,r)=>e&&x.drawImage(e,r%b*w,Math.floor(r/b)*$,w,$)),e.src=v.toDataURL("image/webp")}catch(S){console.error(S)}},c=debounce(()=>{let{w:r,h:t}=l();(r!==o||t!==n)&&(o=r,n=t,e.forEach(e=>s(e,r<=(JSON.parse(e.dataset.pruner).mobileBreakpoint||0),r,t)))},200),d=new IntersectionObserver(e=>{e.forEach(e=>{e.isIntersecting&&(c(),d.unobserve(e.target))})});window.addEventListener("load",c),e.forEach(e=>d.observe(e)),window.addEventListener("resize",c)}const debounce=(e,r)=>{let o;return(...n)=>{clearTimeout(o),o=setTimeout(()=>e(...n),r)}};window.onload=pruner;