function pruner(){var r,e;let o=[...document.querySelectorAll("[data-pruner]")],t={},a=0,n=0,l=r=>t[r]||(t[r]=new Promise((e,o)=>{let t=new Image;t.crossOrigin="anonymous",t.onload=()=>e(t),t.onerror=()=>o(`Error loading: ${r}`),t.src=r})),i=async(r,e,o)=>{let{name:t,cols:a,roi:n,scale:i="1 0",path:s,imageExtension:c="webp"}=JSON.parse(r.dataset.pruner);if(!a||!s||!t)return;let[d,f]=i.split(" "),u=e<=+f;try{let{width:h,height:g}=await l(`${s}${t}-1.${c}`),w=Math.round(h*(u?+d:1)),m=Math.round(g*(u?+d:1)),p=Math.min(Math.ceil(e/w),a),E=Math.ceil(o/m),$=Object.assign(document.createElement("canvas"),{width:p*w,height:E*m}),_=$.getContext("2d");r.src="";let v=n?Math.max(0,Math.floor((n-1)/a)-Math.floor(E/2)):Math.floor(E/2),b=n?Math.max(0,(n-1)%a-Math.floor(p/2)):Math.floor(a/2)-Math.floor(p/2);(await Promise.all(Array.from({length:E*p},(r,e)=>{let o=v+Math.floor(e/p),n=b+e%p;return o<E&&n<a?l(`${s}${t}-${o*a+n+1}.${c}`):null}))).forEach((r,e)=>r&&_.drawImage(r,e%p*w,Math.floor(e/p)*m,w,m)),r.src=$.toDataURL("image/webp")}catch(y){console.error(y)}},s=(r=()=>{let r=innerWidth,e=innerHeight;(r!==a||e!==n)&&(a=r,n=e,o.forEach(o=>i(o,r,e)))},(...e)=>{clearTimeout(r.t),r.t=setTimeout(()=>r(...e),200)}),c=new IntersectionObserver(r=>r.forEach(r=>{r.isIntersecting&&(s(),c.unobserve(r.target))}));window.addEventListener("load",s),o.forEach(r=>c.observe(r)),window.addEventListener("resize",s)}window.onload=pruner;