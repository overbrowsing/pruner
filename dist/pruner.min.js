function pruner(){let e=Array.from(document.querySelectorAll("[data-pruner]")),r=e=>new Promise((r,t)=>{let n=new Image;n.crossOrigin="anonymous",n.onload=()=>r(n),n.onerror=()=>t(`Failed to load image: ${e}`),n.src=e}),t=(e,r)=>{let t=document.createElement("canvas");return t.width=e,t.height=r,t},n=async(e,n,o,a)=>{let l=JSON.parse(e.getAttribute("data-pruner")||"{}"),{imageName:i,cols:d,rows:u,tileWidth:f,tileHeight:c,mobileScale:s,imagePath:h,roi:g,imageExtension:m}=l;if(!d||!u||!f||!c||!h||!i){console.error("Missing required data attributes.");return}let p=n&&s?s:1,b=Math.round(f*p),E=Math.round(c*p),$=Math.min(Math.ceil(o/b),d),w=Math.min(Math.ceil(a/E),u),v=t($*b,w*E),x=v.getContext("2d");x.imageSmoothingEnabled=!1,x.fillStyle="#fff",x.fillRect(0,0,v.width,v.height),e.src="";let y=m||"webp",A=Array.from({length:d*u},(e,r)=>`${h}${i}-${r+1}.${y}`),[_,L]=(()=>{if(g){let e=g-1;return[Math.min(Math.max(0,Math.floor(e/d)-Math.floor(w/2)),u-w),Math.min(Math.max(0,e%d-Math.floor($/2)),d-$)]}return[Math.max(0,Math.floor(u/2)-Math.floor(w/2)),Math.max(0,Math.floor(d/2)-Math.floor($/2))]})(),S=[];for(let W=0;W<w;W++)for(let q=0;q<$;q++){let H=_+W,I=L+q;if(H<u&&I<d){let R=H*d+I;S.push(r(A[R]))}}try{let z=await Promise.all(S);z.forEach((e,r)=>{x.drawImage(e,Math.round(r%$*b),Math.round(Math.floor(r/$)*E),b,E)}),e.src=v.toDataURL("image/WEBP")}catch(B){console.error(B)}},o=debounce(()=>{let r=window.innerWidth,t=window.innerHeight;e.forEach(e=>{let{mobileBreakpoint:o}=JSON.parse(e.getAttribute("data-pruner")||"{}");n(e,o&&r<=o,r,t)})},200),a=()=>{let r=window.innerWidth,t=window.innerHeight;e.forEach(e=>{let{mobileBreakpoint:o}=JSON.parse(e.getAttribute("data-pruner")||"{}");n(e,o&&r<=o,r,t)})},l=new IntersectionObserver(e=>{e.forEach(e=>{e.isIntersecting&&(a(),l.unobserve(e.target))})});e.forEach(e=>l.observe(e)),window.addEventListener("resize",o),window.addEventListener("load",a)}const debounce=(e,r)=>{let t;return(...n)=>{clearTimeout(t),t=setTimeout(()=>e(...n),r)}};window.onload=pruner;