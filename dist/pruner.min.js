function pruner(){let e=Array.from(document.querySelectorAll("[data-pruner]")),t=e=>new Promise((t,r)=>{let n=new Image;n.crossOrigin="anonymous",n.onload=()=>t(n),n.onerror=()=>r(`Failed to load image: ${e}`),n.src=e}),r=(e,t)=>{let r=document.createElement("canvas");return r.width=e,r.height=t,r},n=async(e,n,a,i)=>{let o=JSON.parse(e.getAttribute("data-pruner")||"{}"),{cols:l,rows:c,tileWidth:d,tileHeight:s,imagePath:u,imageName:g,mobileScale:h}=o;if(!l||!c||!d||!s||!u||!g){console.error("Missing required data attributes.");return}let f=n?h||1.2:1,p=d*f,m=s*f,b=Math.min(Math.ceil(a/p),l),E=Math.min(Math.ceil(i/m),c),w=r(b*p,E*m),$=w.getContext("2d");e.src="";let v=Array.from({length:l*c},(e,t)=>`${u}${g} ${t+1}.jpg`);try{let y=[];for(let A=0;A<E;A++)for(let L=0;L<b;L++){let _=A*l+L;_<v.length&&y.push(t(v[_]))}let j=await Promise.all(y);$.clearRect(0,0,w.width,w.height),j.forEach((e,t)=>{$.drawImage(e,t%b*p,Math.floor(t/b)*m,p,m)}),e.src=w.toDataURL("image/jpeg")}catch(q){console.error(q)}},a=debounce(()=>{let t=window.innerWidth,r=window.innerHeight;e.forEach(e=>{let{mobileBreakpoint:a}=JSON.parse(e.getAttribute("data-pruner")||"{}");n(e,a&&t<=a,t,r)})},200),i=()=>{let t=window.innerWidth,r=window.innerHeight;e.forEach(e=>{let{mobileBreakpoint:a}=JSON.parse(e.getAttribute("data-pruner")||"{}");n(e,a&&t<=a,t,r)})},o=new IntersectionObserver(e=>{e.forEach(e=>{e.isIntersecting&&(i(),o.unobserve(e.target))})});e.forEach(e=>o.observe(e)),window.addEventListener("resize",a),window.addEventListener("load",i)}const debounce=(e,t)=>{let r;return(...n)=>{clearTimeout(r),r=setTimeout(()=>e(...n),t)}};window.onload=pruner;