function pruner(){let e=[...document.querySelectorAll("[data-pruner]")],r=e=>new Promise((r,t)=>{let a=new Image;a.crossOrigin="anonymous",a.onload=()=>r(a),a.onerror=()=>t(`Failed to load: ${e}`),a.src=e}),t=(e,r)=>Object.assign(document.createElement("canvas"),{width:e,height:r}),a=()=>({w:innerWidth,h:innerHeight}),n=async(e,a,n,s)=>{let{imageName:i,cols:c,rows:d,tileWidth:m,tileHeight:u,mobileScale:$,imagePath:g,roi:h,imageExtension:f}=JSON.parse(e.dataset.pruner);if(!(c&&d&&m&&u&&g&&i))return console.error("Missing params.");let p=a&&$?$:1,E=Math.round(m*p),w=Math.round(u*p),b=Math.min(Math.ceil(n/E),c),v=Math.min(Math.ceil(s/w),d),x=t(b*E,v*w),y=x.getContext("2d");y.imageSmoothingEnabled=!1,e.src="";let _=f||"webp",L=Array.from({length:c*d},(e,r)=>`${g}${i}-${r+1}.${_}`),[I,S]=h?o(h-1,c,v,b,d):l(c,d,v,b),q=[];for(let z=0;z<v;z++)for(let A=0;A<b;A++){let B=I+z,C=S+A;B<d&&C<c&&q.push(r(L[B*c+C]))}try{let D=await Promise.all(q);D.forEach((e,r)=>y.drawImage(e,r%b*E,Math.floor(r/b)*w,E,w)),e.src=x.toDataURL("image/WEBP")}catch(F){console.error(F)}},o=(e,r,t,a,n)=>[Math.min(Math.max(0,(e/r|0)-(t/2|0)),n-t),Math.min(Math.max(0,e%r-(a/2|0)),r-a)],l=(e,r,t,a)=>[Math.max(0,(r/2|0)-(t/2|0)),Math.max(0,(e/2|0)-(a/2|0))],s=debounce(()=>{let{w:r,h:t}=a();e.forEach(e=>{let{mobileBreakpoint:a}=JSON.parse(e.dataset.pruner);n(e,a&&r<=a,r,t)})},200),i=new IntersectionObserver(e=>{e.forEach(e=>{e.isIntersecting&&(s(),i.unobserve(e.target))})});window.addEventListener("load",s),e.forEach(e=>i.observe(e)),window.addEventListener("resize",s)}const debounce=(e,r)=>{let t;return(...a)=>{clearTimeout(t),t=setTimeout(()=>e(...a),r)}};window.onload=pruner;